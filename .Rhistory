makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL
set <- function(y) {
x <<- y
xinv <<- NULL
}
get <- function() x
setInv <- function(inv) xinv <<- inv
getInv <- function() xinv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setInv(m)
m
}
test <- matrix(runif(9,1,100),3,3)
testCached <- makeCacheMatrix(test)
testInv <- cacheSolve(testCached)
makeCacheMatrix(testmatrix)
makeCacheMatrix$set(testmatrix1)
x <- makeCacheMatrix(testmatrix)
x$set(newmatrix) # to change matrix
x$get
x$setInv
x$getInv
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
for (i in 1:1000) {
x__ <- cacheSolve(x_)
}
x <- matrix(rnorm(160000),400,400)
for (i in 1:1000) {
x_ <- solve(x)
}
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getInv(),solve(x)))
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getInv(),solve(x)))
library(xlsx)
library(xlsx)
library(xlsx)
library(xlsx)
install.packages(rJava)
install.packages("rJava")
library(swirl)
rm(list=ls())
swirl()
students2 %>% gather(sex_class, count, -grade) %>% separate(col=sex_class, c("sex", "class")) %>% print
submit()
students2 %>% gather(sex_class, count, -grade) %>% separate(col=sex_class, c("sex", "class")) %>% print
source('C:/Users/t-owner/AppData/Local/Temp/RtmpozCXci/script2.R')
library(ggplot2)
library(ggplot)
?cmd
setwd("C:\Users\t-owner\Documents\Course 5_Reproducible Research")
setwd("C:\\Users\\t-owner\\Documents\\Course 5_Reproducible Research")
library(ggplot2)
knitr::opts_chunk$set(tidy=FALSE, fig.path='figures/')
install.packages("knitr")
install.packages('knitr')
install.packages('knitr', dependencies=TRUE)
getwd()
install.packages('knitr', repos='http://cran.rstudio.org')
install.packages("knitr", repos="http://cran.rstudio.com/")
library(knitr)
install.packages('knitr', dependencies = T, repos="http://cran.rstudio.com/")
library(knitr)
knitr::opts_chunk$set(tidy=FALSE, fig.path='figures/')
activity<-read.csv(file='./activity.csv', stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
head(activity)
daily_activity <- aggregate(formula = steps~date, data=activity,
FUN = sum, na.rm=TRUE)
#Calculate summary statistics
mean_steps <- round(mean(daily_activity$steps),2) #Mean
median_steps <- quantile(x = daily_activity$steps, probs = 0.5)
mean_steps
median_steps
#Plot a histogram of the total number of steps per day.
histogram <- qplot(x=steps, data=daily_activity) +
labs(y='Count of each total steps per day', x='Number of steps')
plot(histogram)
interval_activity <-
aggregate(formula=steps~interval, data=activity,
FUN=mean, na.rm=TRUE)
#Get the data for the interval with the most average activity across the days
max_steps <- interval_activity[which(interval_activity$steps==max(interval_activity$steps)),]
max_steps
# Function to calculate the mean and normal
# 95% confidence interval around it
mean_ci <- function(data){
m <- mean(data)
data.frame(y=m,
ymin = m-(1.96*sd(data)/sqrt(length(data))),
ymax = m+(1.96*sd(data)/sqrt(length(data)))
}
# Function to calculate the mean and normal
# 95% confidence interval around it
mean_ci <- function(data){
m <- mean(data)
data.frame(y=m,
ymin = m-(1.96*sd(data)/sqrt(length(data))),
ymax = m+(1.96*sd(data)/sqrt(length(data))))
}
steps_per_interval <-
qplot(x=interval, y=steps,
data=subset(activity, complete.cases(activity)),
geom='smooth', stat='summary', fun.data=mean_ci) +
labs(y='Average steps per interval', x='Interval')
steps_per_interval
# Imputing missing values
# Count the number of NAs
total_NAs <- sum(!complete.cases(activity))
step_NAs <- sum(is.na(activity$steps))
# Calculating the number of missing dates
dates_in_range <- seq.Date(from = min(activity$date),
to = max(activity$date),
by='1 day')
date_NAs <- sum(!activity$date[complete.cases(activity)] %in% dates_in_range)
dates_in_range
total_NAs
step_NAs
date_NAs
?floor
# Imputation strategy
# Use previously calculated means
interval_activity$imputed_steps <- floor(interval_activity$steps)
#Merge the replacement values
imputed_activity <- merge(activity,
interval_activity[,c('interval', 'imputed_steps')],
by='interval')
# Replace the missing values
imputed_activity$steps <- ifelse(is.na(imputed_activity$steps),
imputed_activity$imputed_steps,
imputed_activity$steps)
# Remove unneccessary data
imputed_activity$imputed_steps <- NULL
#calculate summary statistics
mean_imputed_steps <- round(mean(daily_imputed_activity$steps),2)
median_imputed_steps <- quantile(x = daily_imputed_activity$steps, probs = 0.5)
# Summarize the data by day
daily_imputed_activity <-
aggregate(formula = steps~date, data = imputed_activity,
FUN = sum, na.rm=TRUE)
#calculate summary statistics
mean_imputed_steps <- round(mean(daily_imputed_activity$steps),2)
median_imputed_steps <- quantile(x = daily_imputed_activity$steps, probs = 0.5)
mean_imputed_steps
median_imputed_steps
histogram %+% daily_imputed_activity
# Differences in activity patterns between weekdays and weekends
#Label each date as weekday/weekend(1:5 are weekdays, 6:7 are weekends)
imputed_activity$week_part <- factor(
ifelse(as.integer(format(imputed_activity$date, format = '%u')) %in% c(1:5),
'weekday', 'weekend'))
# Plot the average steps per interval, given the week_part
steps_per_interval %+% imputed_activity + facet_grid(week_part~.)
knit2html("PA1_template.Rmd")
setwd("C:\\Users\\t-owner\\Documents\\Course 5_Reproducible Research\\RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
library(knitr)
# Define some options for knitr
knitr::opts_chunk$set(tidy=FALSE, fig.path='figures/')
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html()
knit2html("PA1_template.Rmd")
